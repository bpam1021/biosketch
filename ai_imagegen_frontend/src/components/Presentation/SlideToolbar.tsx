import React, { useState } from "react";
import { Slide } from "../../types/Presentation";
import {
  updateSlide,
  regenerateSlide,
  deleteSlide,
  duplicateSlide,
} from "../../api/presentationApi";
import { toast } from "react-toastify";

interface SlideToolbarProps {
  slide: Slide;
  onUpdate: (updated: Slide) => void;
  onDelete: (id: number) => void;
  onDuplicate: (newSlide: Slide) => void;
}

const SlideToolbar: React.FC<SlideToolbarProps> = ({
  slide,
  onUpdate,
  onDelete,
  onDuplicate,
}) => {
  const [loading, setLoading] = useState(false);

  const handleSave = async () => {
    setLoading(true);
    try {
      const updated = await updateSlide(slide.id, {
        title: slide.title,
        description: slide.description,
        canvas_json: slide.canvas_json,
      });
      onUpdate(updated);
      toast.success("Slide saved");
    } catch (e) {
      toast.error("Failed to save slide");
    } finally {
      setLoading(false);
    }
  };

  const handleRegenerate = async () => {
    setLoading(true);
    try {
      const regenerated = await regenerateSlide(slide.id);
      onUpdate(regenerated);
      toast.success("Slide regenerated by AI");
    } catch (e) {
      toast.error("Failed to regenerate slide");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (loading) return;
    if (!confirm("Are you sure you want to delete this slide?")) return;
    setLoading(true);
    try {
      await deleteSlide(slide.id);
      onDelete(slide.id);
      toast.success("Slide deleted");
    } catch (e) {
      toast.error("Failed to delete slide");
    } finally {
      setLoading(false);
    }
  };

  const handleDuplicate = async () => {
    setLoading(true);
    try {
      const newSlide = await duplicateSlide(slide.id);
      onDuplicate(newSlide);
      toast.success("Slide duplicated");
    } catch (e) {
      toast.error("Failed to duplicate slide");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex gap-2 justify-end mt-2">
      <button
        onClick={handleRegenerate}
        disabled={loading}
        className="px-3 py-1 text-sm bg-purple-500 text-white rounded hover:bg-purple-600"
      >
        AI Rewrite
      </button>
      <button
        onClick={handleSave}
        disabled={loading}
        className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Save
      </button>
      <button
        onClick={handleDuplicate}
        disabled={loading}
        className="px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600"
      >
        Duplicate
      </button>
      <button
        onClick={handleDelete}
        disabled={loading}
        className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600"
      >
        Delete
      </button>
    </div>
  );
};

export default SlideToolbar;
