import React from 'react';
import { AnalysisJob } from '../../types/RNASeq';
import { FiClock, FiCheckCircle, FiXCircle, FiAlertCircle, FiPlay } from 'react-icons/fi';

interface JobProgressCardProps {
  job: AnalysisJob;
  onUserInput?: (jobId: string, input: string, continueAnalysis: boolean) => void;
}

const JobProgressCard: React.FC<JobProgressCardProps> = ({ job, onUserInput }) => {
  const [userInput, setUserInput] = React.useState('');

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <FiCheckCircle className="text-green-ysisTypes = [
    { value: 'all', label: 'All Interpretations' },
    { value: 'pca_clustering', label: 'PCA & Clustering' },
    { value: 'differential_expression', label: 'Differential Expression' },
    { value: 'pathway_enrichment', label: 'Pathway Enrichment' },
    { value: 'cell_clustering', label: 'Cell Clustering' },
    { value: 'cell_type_annotation', label: 'Cell Type Annotation' },
    { value: 'quality_control', label: 'Quality Control' },
  ];

  const filteredInterpretations = selectedType === 'all' 
    ? interpretations 
    : interpretations.filter(i => i.analysis_type === selectedType);

  const getTypeColor = (type: string) => {
    const colors = {
      'pca_clustering': 'bg-blue-100 text-blue-800',
      'differential_expression': 'bg-green-100 text-green-800',
      'pathway_enrichment': 'bg-purple-100 text-purple-800',
      'cell_clustering': 'bg-orange-100 text-orange-800',
      'cell_type_annotation': 'bg-pink-100 text-pink-800',
      'quality_control': 'bg-gray-100 text-gray-800',
    };
    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const exportInterpretation = (interpretation: AIInterpretation) => {
    const content = `
# ${interpretation.analysis_type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())} Interpretation

**Generated:** ${new Date(interpretation.created_at).toLocaleString()}
**Confidence:** ${(interpretation.confidence_score * 100).toFixed(1)}%

${interpretation.user_input ? `**Your Input:** ${interpretation.user_input}\n\n` : ''}

## AI Analysis

${interpretation.ai_response}

---
Generated by RNA-seq Analysis Platform
    `.trim();

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `interpretation_${interpretation.analysis_type}_${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
          <FiMessageSquare className="text-purple-600" />
          AI Interpretations
        </h2>
        <button
          onClick={onGenerateNew}
          disabled={loading}
          className="flex items-center gap-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition-colors"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Generating...
            </>
          ) : (
            <>
              <FiRefreshCw size={16} />
              Generate New
            </>
          )}
        </button>
      </div>

      {/* Filter */}
      <div className="mb-4">
        <select
          value={selectedType}
          onChange={(e) => setSelectedType(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
        >
          {analysisTypes.map((type) => (
            <option key={type.value} value={type.value}>
              {type.label}
            </option>
          ))}
        </select>
      </div>

      {/* Interpretations */}
      <div className="space-y-4">
        {filteredInterpretations.length === 0 ? (
          <div className="text-center py-8">
            <FiMessageSquare className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-500">No AI interpretations available yet.</p>
            <p className="text-sm text-gray-400 mt-1">
              Generate interpretations to get AI-powered insights into your analysis results.
            </p>
          </div>
        ) : (
          filteredInterpretations.map((interpretation) => (
            <div key={interpretation.id} className="border border-gray-200 rounded-lg overflow-hidden">
              <div 
                className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => setExpandedId(expandedId === interpretation.id ? null : interpretation.id)}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(interpretation.analysis_type)}`}>
                        {interpretation.analysis_type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </span>
                      {interpretation.confidence_score > 0 && (
                        <span className="text-xs text-gray-500">
                          {(interpretation.confidence_score * 100).toFixed(1)}% confidence
                        </span>
                      )}
                    </div>
                    
                    {interpretation.user_input && (
                      <p className="text-sm text-gray-600 mb-2">
                        <strong>Your input:</strong> {interpretation.user_input}
                      </p>
                    )}
                    
                    <p className="text-sm text-gray-700 line-clamp-2">
                      {interpretation.ai_response}
                    </p>
                  </div>
                  
                  <div className="flex items-center gap-2 ml-4">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        exportInterpretation(interpretation);
                      }}
                      className="p-1 text-gray-400 hover:text-gray-600"
                      title="Export interpretation"
                    >
                      <FiDownload size={16} />
                    </button>
                    <span className="text-xs text-gray-400">
                      {new Date(interpretation.created_at).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
              
              {expandedId === interpretation.id && (
                <div className="px-4 pb-4 border-t border-gray-100">
                  <div className="prose prose-sm max-w-none mt-3">
                    <div className="whitespace-pre-wrap text-gray-700">
                      {interpretation.ai_response}
                    </div>
                  </div>
                  
                  {interpretation.context_data && Object.keys(interpretation.context_data).length > 0 && (
                    <details className="mt-3">
                      <summary className="cursor-pointer text-sm text-gray-600 hover:text-gray-800">
                        Analysis Context Data
                      </summary>
                      <pre className="mt-2 text-xs bg-gray-50 p-2 rounded overflow-x-auto">
                        {JSON.stringify(interpretation.context_data, null, 2)}
                      </pre>
                    </details>
                  )}
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default AIInterpretationPanel;600" />;
      case 'failed': return <FiXCircle className="text-red-600" />;
      case 'waiting_for_input': return <FiAlertCircle className="text-yellow-600" />;
      case 'processing': return <FiPlay className="text-blue-600 animate-pulse" />;
      default: return <FiClock className="text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-50 border-green-200 text-green-800';
      case 'failed': return 'bg-red-50 border-red-200 text-red-800';
      case 'waiting_for_input': return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'processing': return 'bg-blue-50 border-blue-200 text-blue-800';
      default: return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  const formatDuration = (minutes: number) => {
    if (minutes < 60) return `${minutes} min`;
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}h ${mins}m`;
  };

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-4 shadow-sm">
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-center gap-2">
          {getStatusIcon(job.status)}
          <h3 className="font-semibold text-gray-900">
            {job.analysis_type.replace('_', ' ').toUpperCase()} Analysis
          </h3>
        </div>
        <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(job.status)}`}>
          {job.status.replace('_', ' ')}
        </span>
      </div>

      <p className="text-sm text-gray-600 mb-3">{job.current_step_name}</p>

      {/* Progress Bar */}
      {job.status === 'processing' && (
        <div className="mb-3">
          <div className="flex justify-between items-center mb-1">
            <span className="text-xs text-gray-500">Step {job.current_step}/5</span>
            <span className="text-xs text-gray-500">{job.progress_percentage}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${job.progress_percentage}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* User Input Required */}
      {job.status === 'waiting_for_input' && onUserInput && (
        <div className="mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
          <p className="text-sm text-yellow-800 mb-2">
            This analysis requires your input to continue.
          </p>
          <textarea
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Enter your hypothesis or additional information..."
            className="w-full p-2 border border-gray-300 rounded text-sm"
            rows={3}
          />
          <div className="flex gap-2 mt-2">
            <button
              onClick={() => onUserInput(job.id, userInput, true)}
              className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700"
            >
              Continue Analysis
            </button>
            <button
              onClick={() => onUserInput(job.id, userInput, false)}
              className="px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700"
            >
              Stop Analysis
            </button>
          </div>
        </div>
      )}

      {/* Job Statistics */}
      <div className="grid grid-cols-2 gap-4 text-sm">
        {job.num_samples > 0 && (
          <div>
            <span className="text-gray-500">Samples:</span>
            <span className="ml-1 font-medium">{job.num_samples}</span>
          </div>
        )}
        {job.genes_quantified > 0 && (
          <div>
            <span className="text-gray-500">Genes:</span>
            <span className="ml-1 font-medium">{job.genes_quantified.toLocaleString()}</span>
          </div>
        )}
        {job.significant_genes > 0 && (
          <div>
            <span className="text-gray-500">DEGs:</span>
            <span className="ml-1 font-medium">{job.significant_genes.toLocaleString()}</span>
          </div>
        )}
        {job.cells_detected > 0 && (
          <div>
            <span className="text-gray-500">Cells:</span>
            <span className="ml-1 font-medium">{job.cells_detected.toLocaleString()}</span>
          </div>
        )}
        {job.cell_clusters > 0 && (
          <div>
            <span className="text-gray-500">Clusters:</span>
            <span className="ml-1 font-medium">{job.cell_clusters}</span>
          </div>
        )}
        {job.enriched_pathways > 0 && (
          <div>
            <span className="text-gray-500">Pathways:</span>
            <span className="ml-1 font-medium">{job.enriched_pathways}</span>
          </div>
        )}
        {job.duration_minutes > 0 && (
          <div>
            <span className="text-gray-500">Duration:</span>
            <span className="ml-1 font-medium">{formatDuration(job.duration_minutes)}</span>
          </div>
        )}
        {job.alignment_rate > 0 && (
          <div>
            <span className="text-gray-500">Alignment:</span>
            <span className="ml-1 font-medium">{(job.alignment_rate * 100).toFixed(1)}%</span>
          </div>
        )}
      </div>

      {/* Error Message */}
      {job.error_message && (
        <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded">
          <p className="text-sm text-red-800">{job.error_message}</p>
        </div>
      )}

      {/* Pipeline Steps */}
      {job.pipeline_steps && job.pipeline_steps.length > 0 && (
        <div className="mt-3">
          <details className="group">
            <summary className="cursor-pointer text-sm text-gray-600 hover:text-gray-800">
              Pipeline Steps ({job.pipeline_steps.length})
            </summary>
            <div className="mt-2 space-y-1">
              {job.pipeline_steps.map((step) => (
                <div key={step.step_number} className="flex items-center gap-2 text-xs">
                  <span className={`w-2 h-2 rounded-full ${
                    step.status === 'completed' ? 'bg-green-500' :
                    step.status === 'running' ? 'bg-blue-500' :
                    step.status === 'failed' ? 'bg-red-500' : 'bg-gray-300'
                  }`}></span>
                  <span className="text-gray-600">{step.step_name}</span>
                  {step.duration_minutes > 0 && (
                    <span className="text-gray-400">({step.duration_minutes} min)</span>
                  )}
                </div>
              ))}
            </div>
          </details>
        </div>
      )}

      {/* AI Interpretations */}
      {job.ai_interpretations && job.ai_interpretations.length > 0 && (
        <div className="mt-3">
          <details className="group">
            <summary className="cursor-pointer text-sm text-gray-600 hover:text-gray-800">
              AI Interpretations ({job.ai_interpretations.length})
            </summary>
            <div className="mt-2 space-y-2">
              {job.ai_interpretations.map((interpretation) => (
                <div key={interpretation.id} className="p-2 bg-purple-50 rounded text-xs">
                  <div className="font-medium text-purple-800">
                    {interpretation.analysis_type.replace('_', ' ')}
                  </div>
                  <div className="text-purple-700 mt-1 line-clamp-2">
                    {interpretation.ai_response}
 