import React, { useState } from 'react';
import { AIInterpretation } from '../../types/RNASeq';
import { FiMessageSquare, FiRefreshCw, FiDownload } from 'react-icons/fi';

interface AIInterpretationPanelProps {
  interpretations: AIInterpretation[];
  onGenerateNew: () => void;
  loading?: boolean;
}

const AIInterpretationPanel: React.FC<AIInterpretationPanelProps> = ({
  interpretations,
  onGenerateNew,
  loading = false
}) => {
  const [selectedType, setSelectedType] = useState<string>('all');
  const [expandedId, setExpandedId] = useState<number | null>(null);

  const analysisTypes = [
    { value: 'all', label: 'All Interpretations' },
    { value: 'pca_clustering', label: 'PCA & Clustering' },
    { value: 'differential_expression', label: 'Differential Expression' },
    { value: 'pathway_enrichment', label: 'Pathway Enrichment' },
    { value: 'cell_clustering', label: 'Cell Clustering' },
    { value: 'cell_type_annotation', label: 'Cell Type Annotation' },
    { value: 'quality_control', label: 'Quality Control' },
  ];

  const filteredInterpretations = selectedType === 'all' 
    ? interpretations 
    : interpretations.filter(i => i.analysis_type === selectedType);

  const getTypeColor = (type: string) => {
    const colors = {
      'pca_clustering': 'bg-blue-100 text-blue-800',
      'differential_expression': 'bg-green-100 text-green-800',
      'pathway_enrichment': 'bg-purple-100 text-purple-800',
      'cell_clustering': 'bg-orange-100 text-orange-800',
      'cell_type_annotation': 'bg-pink-100 text-pink-800',
      'quality_control': 'bg-gray-100 text-gray-800',
    };
    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const exportInterpretation = (interpretation: AIInterpretation) => {
    const content = `
# ${interpretation.analysis_type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())} Interpretation

**Generated:** ${new Date(interpretation.created_at).toLocaleString()}
**Confidence:** ${(interpretation.confidence_score * 100).toFixed(1)}%

${interpretation.user_input ? `**Your Input:** ${interpretation.user_input}\n\n` : ''}

## AI Analysis

${interpretation.ai_response}

---
Generated by RNA-seq Analysis Platform
    `.trim();

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `interpretation_${interpretation.analysis_type}_${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
          <FiMessageSquare className="text-purple-600" />
          AI Interpretations
        </h2>
        <button
          onClick={onGenerateNew}
          disabled={loading}
          className="flex items-center gap-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition-colors"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Generating...
            </>
          ) : (
            <>
              <FiRefreshCw size={16} />
              Generate New
            </>
          )}
        </button>
      </div>

      {/* Filter */}
      <div className="mb-4">
        <select
          value={selectedType}
          onChange={(e) => setSelectedType(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
        >
          {analysisTypes.map((type) => (
            <option key={type.value} value={type.value}>
              {type.label}
            </option>
          ))}
        </select>
      </div>

      {/* Interpretations */}
      <div className="space-y-4">
        {filteredInterpretations.length === 0 ? (
          <div className="text-center py-8">
            <FiMessageSquare className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-500">No AI interpretations available yet.</p>
            <p className="text-sm text-gray-400 mt-1">
              Generate interpretations to get AI-powered insights into your analysis results.
            </p>
          </div>
        ) : (
          filteredInterpretations.map((interpretation) => (
            <div key={interpretation.id} className="border border-gray-200 rounded-lg overflow-hidden">
              <div 
                className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => setExpandedId(expandedId === interpretation.id ? null : interpretation.id)}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(interpretation.analysis_type)}`}>
                        {interpretation.analysis_type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </span>
                      {interpretation.confidence_score > 0 && (
                        <span className="text-xs text-gray-500">
                          {(interpretation.confidence_score * 100).toFixed(1)}% confidence
                        </span>
                      )}
                    </div>
                    
                    {interpretation.user_input && (
                      <p className="text-sm text-gray-600 mb-2">
                        <strong>Your input:</strong> {interpretation.user_input}
                      </p>
                    )}
                    
                    <p className="text-sm text-gray-700 line-clamp-2">
                      {interpretation.ai_response}
                    </p>
                  </div>
                  
                  <div className="flex items-center gap-2 ml-4">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        exportInterpretation(interpretation);
                      }}
                      className="p-1 text-gray-400 hover:text-gray-600"
                      title="Export interpretation"
                    >
                      <FiDownload size={16} />
                    </button>
                    <span className="text-xs text-gray-400">
                      {new Date(interpretation.created_at).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
              
              {expandedId === interpretation.id && (
                <div className="px-4 pb-4 border-t border-gray-100">
                  <div className="prose prose-sm max-w-none mt-3">
                    <div className="whitespace-pre-wrap text-gray-700">
                      {interpretation.ai_response}
                    </div>
                  </div>
                  
                  {interpretation.context_data && Object.keys(interpretation.context_data).length > 0 && (
                    <details className="mt-3">
                      <summary className="cursor-pointer text-sm text-gray-600 hover:text-gray-800">
                        Analysis Context Data
                      </summary>
                      <pre className="mt-2 text-xs bg-gray-50 p-2 rounded overflow-x-auto">
                        {JSON.stringify(interpretation.context_data, null, 2)}
                      </pre>
                    </details>
                  )}
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default AIInterpretationPanel;