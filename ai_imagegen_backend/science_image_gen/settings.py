"""
Django settings for science_image_gen project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-79-a-w&c0j!l6lm0=co=z_j(7-lz*xg5ju1t()jtrt)w6c0ypn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['biosketch.ai', 'main.biosketch.ai', 'api.biosketch.ai', '127.0.0.1', 'localhost']

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "https://main.biosketch.ai",
    "https://biosketch.ai",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.biosketch\.ai$",
]


CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'users.apps.UsersConfig',
    'community',
    'channels',
    'adminpanel',
    'rnaseq',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Short-lived access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # Long-lived refresh token
    'ROTATE_REFRESH_TOKENS': True,  # Issue a new refresh token with access token
    'BLACKLIST_AFTER_ROTATION': True,  # Old refresh tokens become invalid
    'AUTH_HEADER_TYPES': ('Bearer',),  # Expect Authorization: Bearer <token>
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'science_image_gen.utils.cors_media.CORSMediaMiddleware',
]

ROOT_URLCONF = 'science_image_gen.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'science_image_gen.wsgi.application'
ASGI_APPLICATION = 'science_image_gen.asgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'science_image_gen_db',
        'USER': 'postgres',
        'PASSWORD': 'Biosketch123!',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
# Enhanced Pipeline Configuration
PIPELINE_CONFIG = {
    'BULK_RNASEQ': {
        'TOOLS': {
            'FASTQC': os.environ.get('FASTQC_PATH', 'fastqc'),
            'TRIMMOMATIC': os.environ.get('TRIMMOMATIC_PATH', 'trimmomatic'),
            'STAR': os.environ.get('STAR_PATH', 'STAR'),
            'RSEM': os.environ.get('RSEM_PATH', 'rsem-calculate-expression'),
            'SAMTOOLS': os.environ.get('SAMTOOLS_PATH', 'samtools'),
        },
        'REFERENCE': {
            'GENOME_INDEX': os.environ.get('STAR_INDEX_PATH', '/data/reference/star_index'),
            'TRANSCRIPTOME_INDEX': os.environ.get('RSEM_INDEX_PATH', '/data/reference/rsem_index/rsem_ref'),
            'GTF_FILE': os.environ.get('GTF_FILE_PATH', '/data/reference/genes.gtf'),
            'GENOME_FASTA': os.environ.get('REFERENCE_GENOME_PATH', '/data/reference/genome.fa'),
        },
        'PARAMETERS': {
            'MIN_EXPRESSION_THRESHOLD': 1.0,
            'FDR_THRESHOLD': 0.05,
            'LOG2FC_THRESHOLD': 1.0,
            'MIN_SAMPLES_EXPRESSING': 3,
            'TRIMMOMATIC_SETTINGS': {
                'LEADING': 3,
                'TRAILING': 3,
                'SLIDINGWINDOW': '4:15',
                'MINLEN': 20
            },
            'STAR_SETTINGS': {
                'outSAMtype': 'BAM Unsorted',
                'quantMode': 'TranscriptomeSAM',
                'outSAMunmapped': 'Within'
            },
            'RSEM_SETTINGS': {
                'estimate_rspd': True,
                'calc_ci': True,
                'seed': 12345
            }
        }
    },
    'SCRNA_SEQ': {
        'TOOLS': {
            'CELLRANGER': os.environ.get('CELLRANGER_PATH', 'cellranger'),
            'FASTQC': os.environ.get('FASTQC_PATH', 'fastqc'),
            'STAR_SOLO': os.environ.get('STAR_PATH', 'STAR'),
            'UMI_TOOLS': os.environ.get('UMI_TOOLS_PATH', 'umi_tools'),
        },
        'REFERENCE': {
            'GENOME_INDEX': os.environ.get('CELLRANGER_INDEX_PATH', '/data/reference/star_index'),
            'GTF_FILE': os.environ.get('GTF_FILE_PATH', '/data/reference/genes.gtf'),
            'GENOME_FASTA': os.environ.get('REFERENCE_GENOME_PATH', '/data/reference/genome.fa'),
        },
        'PARAMETERS': {
            'MIN_GENES_PER_CELL': 200,
            'MIN_CELLS_PER_GENE': 3,
            'MAX_MITO_PERCENT': 20,
            'CLUSTERING_RESOLUTION': 0.5,
            'N_PCS': 50,
            'N_NEIGHBORS': 10,
            'EXPECTED_CELLS': 5000,
            'CHEMISTRY': '10X Genomics v3',
            'STAR_SOLO_SETTINGS': {
                'soloType': 'CB_UMI_Simple',
                'soloCBwhitelist': 'None',  # Will use built-in whitelist
                'soloUMIlen': 12,
                'soloCBlen': 16
            }
        }
    },
    'THREADS': int(os.environ.get('PIPELINE_THREADS', 8)),
    'MEMORY': os.environ.get('PIPELINE_MEMORY', '8G'),
    'ENABLE_REAL_PIPELINE': os.environ.get('ENABLE_REAL_PIPELINE', 'False').lower() == 'true',
    'ENABLE_AI_INTERPRETATION': os.environ.get('ENABLE_AI_INTERPRETATION', 'True').lower() == 'true',
    'MOCK_DATA_SETTINGS': {
        'BULK_RNASEQ': {
            'N_GENES': 20000,
            'REALISTIC_PATTERNS': True,
            'INCLUDE_BATCH_EFFECTS': False
        },
        'SCRNA_SEQ': {
            'N_CELLS': 5000,
            'N_GENES': 18000,
            'N_CELL_TYPES': 6,
            'DROPOUT_RATE': 0.85,
            'REALISTIC_PATTERNS': True
        }
    }
}

# Enhanced Downstream Analysis Configuration
ANALYSIS_CONFIG = {
    'BULK_RNASEQ': {
        'PCA_COMPONENTS': 10,
        'CLUSTERING_METHODS': ['kmeans', 'hierarchical'],
        'PATHWAY_DATABASES': [
            'GO_Biological_Process_2023', 
            'KEGG_2021_Human', 
            'Reactome_2022',
            'MSigDB_Hallmark_2020',
            'WikiPathways_2023_Human'
        ],
        'ENRICHMENT_METHODS': ['enrichr', 'gsea', 'ora'],
        'DEFAULT_THRESHOLDS': {
            'FDR': 0.05,
            'LOG2FC': 1.0,
            'MIN_EXPRESSION': 1.0,
            'PATHWAY_FDR': 0.05
        },
        'SIGNATURE_DATABASES': [
            'MSigDB_C2_KEGG',
            'MSigDB_C5_GO',
            'MSigDB_H_HALLMARK'
        ]
    },
    'SCRNA_SEQ': {
        'QC_THRESHOLDS': {
            'min_genes': 200,
            'min_cells': 3,
            'max_mito_pct': 20,
            'max_genes': 5000,
            'min_counts': 1000,
            'max_counts': 50000
        },
        'NORMALIZATION_METHOD': 'log_normalize',
        'CLUSTERING_RESOLUTION': [0.1, 0.3, 0.5, 0.8, 1.0],
        'TRAJECTORY_METHODS': ['paga', 'monocle3', 'slingshot'],
        'ANNOTATION_DATABASES': ['CellTypist', 'SingleR', 'Azimuth', 'PanglaoDB'],
        'COMMUNICATION_DATABASES': ['CellPhoneDB', 'NicheNet', 'CellChat'],
        'DIMENSIONALITY_REDUCTION': {
            'n_pcs': 50,
            'n_neighbors': 10,
            'umap_min_dist': 0.3,
            'umap_spread': 1.0
        }
    },
    'AI_INTERPRETATION': {
        'MODEL': 'gpt-4',
        'MAX_TOKENS': 2000,
        'TEMPERATURE': 0.3,
        'CONTEXT_WINDOW': 8000,
        'ENABLE_HYPOTHESIS_INTEGRATION': True,
        'ENABLE_PIPELINE_CONTEXT': True
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STRIPE_TEST_PUBLIC_KEY = env('STRIPE_TEST_PUBLIC_KEY')
STRIPE_TEST_SECRET_KEY = env('STRIPE_TEST_SECRET_KEY')
OPENAI_API_KEY = env('OPENAI_API_KEY')
GOOGLE_API_KEY = env('GOOGLE_API_KEY')
PAYPAL_CLIENT_ID = 'your-client-id'
PAYPAL_CLIENT_SECRET = 'your-client-secret'

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE