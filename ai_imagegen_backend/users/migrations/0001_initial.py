# Generated by Django 5.2.5 on 2025-08-24 16:46

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('icon', models.ImageField(blank=True, null=True, upload_to='achievement_icons/')),
                ('criteria_code', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon_url', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChartTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('data_viz', 'Data Visualization'), ('process', 'Process Diagrams'), ('hierarchy', 'Organizational Charts'), ('comparison', 'Comparison Charts'), ('timeline', 'Timeline Charts'), ('geographic', 'Maps and Geographic'), ('scientific', 'Scientific Diagrams'), ('flowchart', 'Flowcharts'), ('mindmap', 'Mind Maps'), ('infographic', 'Infographics')], max_length=30)),
                ('chart_type', models.CharField(choices=[('bar_chart', 'Bar Chart'), ('line_chart', 'Line Chart'), ('pie_chart', 'Pie Chart'), ('scatter_plot', 'Scatter Plot'), ('flowchart', 'Flowchart'), ('process_diagram', 'Process Diagram'), ('org_chart', 'Organizational Chart'), ('timeline', 'Timeline'), ('venn_diagram', 'Venn Diagram'), ('mindmap', 'Mind Map'), ('network_diagram', 'Network Diagram'), ('infographic', 'Infographic')], max_length=50)),
                ('template_config', models.JSONField(default=dict, help_text='Chart.js/D3.js/Mermaid config template')),
                ('style_options', models.JSONField(default=list, help_text='Available styling options')),
                ('data_requirements', models.JSONField(default=dict, help_text='Required data structure and fields')),
                ('sample_data', models.JSONField(default=dict, help_text='Sample data for preview')),
                ('generation_prompts', models.JSONField(default=dict, help_text='AI prompts for generating this chart type')),
                ('content_keywords', models.JSONField(default=list, help_text='Keywords that suggest this chart type')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='chart_templates/')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContentSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('section_type', models.CharField(choices=[('heading', 'Heading'), ('paragraph', 'Paragraph'), ('list', 'List'), ('table', 'Table'), ('image', 'Image'), ('code', 'Code Block'), ('quote', 'Quote'), ('title_slide', 'Title Slide'), ('content_slide', 'Content Slide'), ('image_slide', 'Image Slide'), ('chart_slide', 'Chart Slide'), ('comparison_slide', 'Comparison Slide'), ('diagram', 'Diagram/Chart'), ('video', 'Video'), ('audio', 'Audio'), ('interactive', 'Interactive Element')], max_length=30)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('order', models.PositiveIntegerField(default=0)),
                ('content', models.TextField(blank=True, help_text='Raw content text')),
                ('rich_content', models.TextField(blank=True, help_text='HTML/Markdown formatted content')),
                ('content_data', models.JSONField(default=dict, help_text='Structured content data')),
                ('image_url', models.URLField(blank=True)),
                ('image_prompt', models.TextField(blank=True)),
                ('media_files', models.JSONField(default=list, help_text='Associated media file URLs')),
                ('layout_config', models.JSONField(default=dict, help_text='Section-specific layout')),
                ('style_config', models.JSONField(default=dict, help_text='Colors, fonts, spacing')),
                ('animation_config', models.JSONField(default=dict, help_text='Animation settings')),
                ('interaction_config', models.JSONField(default=dict, help_text='Interactive elements')),
                ('ai_generated', models.BooleanField(default=False)),
                ('generation_prompt', models.TextField(blank=True)),
                ('generation_metadata', models.JSONField(default=dict)),
                ('canvas_json', models.TextField(blank=True)),
                ('rendered_image', models.ImageField(blank=True, null=True, upload_to='rendered_sections/')),
                ('comments', models.JSONField(blank=True, default=list, help_text='Comments on this section')),
                ('version_history', models.JSONField(blank=True, default=list, help_text='Version history for tracking changes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='PresentationTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('template_type', models.CharField(choices=[('document', 'Document Template'), ('slide', 'Slide Template')], max_length=20)),
                ('category', models.CharField(choices=[('academic', 'Academic Research'), ('business', 'Business Presentation'), ('creative', 'Creative Portfolio'), ('technical', 'Technical Documentation'), ('medical', 'Medical Case Study'), ('educational', 'Educational Content'), ('marketing', 'Marketing Presentation')], max_length=50)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='presentation_templates/')),
                ('template_data', models.JSONField(default=dict, help_text='Template structure and styling')),
                ('style_config', models.JSONField(default=dict, help_text='Default styling configuration')),
                ('layout_config', models.JSONField(default=dict, help_text='Layout configuration')),
                ('is_premium', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TemplateCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CreditTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Positive for recharges, negative for usage', max_digits=8)),
                ('type', models.CharField(choices=[('recharge', 'Recharge'), ('usage', 'Usage')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiagramElement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('chart_type', models.CharField(max_length=50)),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data and configuration')),
                ('style_config', models.JSONField(default=dict, help_text='Custom styling')),
                ('source_content', models.TextField(help_text='Original content used to generate chart')),
                ('generation_prompt', models.TextField(blank=True)),
                ('ai_suggestions', models.JSONField(default=list, help_text='AI-suggested improvements')),
                ('position_x', models.FloatField(default=0)),
                ('position_y', models.FloatField(default=0)),
                ('width', models.FloatField(default=100)),
                ('height', models.FloatField(default=100)),
                ('z_index', models.IntegerField(default=1)),
                ('rendered_image', models.ImageField(blank=True, null=True, upload_to='rendered_charts/')),
                ('svg_data', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chart_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.charttemplate')),
                ('content_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagrams', to='users.contentsection')),
            ],
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('stripe_payment_intent', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_name', models.CharField(default='default_image.png', max_length=255)),
                ('image_url', models.TextField()),
                ('token_count', models.IntegerField(default=0)),
                ('image_title', models.CharField(default='default_title', max_length=255)),
                ('image_size', models.CharField(default='default_size', max_length=50)),
                ('image_type', models.CharField(default='default_type', max_length=50)),
                ('image_model', models.CharField(default='default_model', max_length=50)),
                ('image_quality', models.CharField(default='default_quality', max_length=50)),
                ('prompt', models.TextField(blank=True, null=True)),
                ('prompt_key', models.CharField(default='default_value', max_length=255)),
                ('is_published', models.BooleanField(default=False)),
                ('is_remixed', models.BooleanField(default=False)),
                ('sequence_index', models.IntegerField(default=0)),
                ('sci_description', models.TextField(blank=True, null=True)),
                ('user_description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='users.field')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('new_follower_alert', models.BooleanField(default=True)),
                ('challenge_update_alert', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OldPresentation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('original_prompt', models.TextField()),
                ('presentation_type', models.CharField(choices=[('slides', 'Slide Presentation'), ('document', 'Rich Document')], default='slides', max_length=20)),
                ('document_content', models.TextField(blank=True, help_text='Rich HTML content for document type')),
                ('document_settings', models.JSONField(blank=True, default=dict, help_text='Document formatting settings')),
                ('is_public', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=False)),
                ('is_template', models.BooleanField(default=False)),
                ('template_category', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_exported', models.BooleanField(default=False)),
                ('export_format', models.CharField(blank=True, choices=[('pptx', 'PowerPoint'), ('pdf', 'PDF'), ('mp4', 'Video'), ('docx', 'Word Document')], max_length=10)),
                ('exported_file', models.FileField(blank=True, null=True, upload_to='exports/')),
                ('video_settings', models.JSONField(blank=True, default=dict)),
                ('collaborators', models.ManyToManyField(blank=True, related_name='old_collaborated_presentations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_presentations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('presentation_type', models.CharField(choices=[('document', 'Document'), ('slide', 'Slide Deck')], default='slide', max_length=20)),
                ('original_prompt', models.TextField()),
                ('quality', models.CharField(choices=[('low', 'Low Quality'), ('medium', 'Medium Quality'), ('high', 'High Quality')], default='medium', max_length=20)),
                ('generated_outline', models.JSONField(default=dict, help_text='AI-generated presentation outline')),
                ('generation_settings', models.JSONField(default=dict, help_text='Settings used for AI generation')),
                ('theme_settings', models.JSONField(default=dict, help_text='Colors, fonts, layout settings')),
                ('brand_settings', models.JSONField(default=dict, help_text='Brand colors, logos, etc.')),
                ('document_content', models.TextField(blank=True, help_text='Rich HTML content for document type')),
                ('document_settings', models.JSONField(default=dict, help_text='Document formatting settings')),
                ('page_layout', models.CharField(choices=[('single_column', 'Single Column'), ('two_column', 'Two Column'), ('three_column', 'Three Column')], default='single_column', max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=True)),
                ('sharing_settings', models.JSONField(default=dict, help_text='Sharing and permission settings')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('generating', 'Generating'), ('ready', 'Ready'), ('error', 'Error'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('word_count', models.PositiveIntegerField(default=0)),
                ('estimated_duration', models.PositiveIntegerField(default=0, help_text='Estimated presentation duration in minutes')),
                ('export_settings', models.JSONField(default=dict, help_text='Export configuration')),
                ('published_url', models.URLField(blank=True, help_text='Public sharing URL')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('analytics_data', models.JSONField(default=dict, help_text='Usage and engagement analytics')),
                ('generation_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('total_credits_used', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('is_exported', models.BooleanField(default=False)),
                ('export_format', models.CharField(blank=True, choices=[('pptx', 'PowerPoint'), ('pdf', 'PDF'), ('mp4', 'Video'), ('docx', 'Word Document'), ('html', 'HTML')], max_length=10)),
                ('exported_file', models.FileField(blank=True, null=True, upload_to='presentation_exports/')),
                ('video_settings', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('collaborators', models.ManyToManyField(blank=True, related_name='collaborated_new_presentations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_presentations', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.presentationtemplate')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddField(
            model_name='contentsection',
            name='presentation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_sections', to='users.presentation'),
        ),
        migrations.CreateModel(
            name='AIGenerationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('generation_type', models.CharField(choices=[('presentation_outline', 'Presentation Outline'), ('section_content', 'Section Content'), ('chart_generation', 'Chart Generation'), ('image_generation', 'Image Generation'), ('content_enhancement', 'Content Enhancement'), ('summary_generation', 'Summary Generation')], max_length=30)),
                ('prompt', models.TextField()),
                ('model_used', models.CharField(default='gpt-4', max_length=100)),
                ('credits_used', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('tokens_consumed', models.PositiveIntegerField(default=0)),
                ('generated_content', models.JSONField(default=dict)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presentation_ai_generations', to=settings.AUTH_USER_MODEL)),
                ('content_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.contentsection')),
                ('presentation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.presentation')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PresentationComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('position_data', models.JSONField(default=dict, help_text='Position within content')),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('content_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='section_comments', to='users.contentsection')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='users.presentationcomment')),
                ('presentation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presentation_comments', to='users.presentation')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_presentation_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PresentationExportJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('export_format', models.CharField(choices=[('pdf', 'PDF Document'), ('docx', 'Word Document'), ('pptx', 'PowerPoint'), ('html', 'HTML'), ('mp4', 'Video'), ('png', 'Images'), ('json', 'JSON Data')], max_length=10)),
                ('export_settings', models.JSONField(default=dict)),
                ('selected_sections', models.JSONField(default=list, help_text='Specific sections to export')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('progress', models.PositiveIntegerField(default=0)),
                ('output_file', models.FileField(blank=True, null=True, upload_to='presentation_exports/')),
                ('output_url', models.URLField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('presentation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='export_jobs', to='users.presentation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PresentationExportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_format', models.CharField(blank=True, choices=[('pptx', 'PPTX'), ('pdf', 'PDF')], max_length=10, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
                ('new_presentation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.presentation')),
                ('old_presentation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.oldpresentation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('content_type', models.CharField(choices=[('slide', 'Presentation Slide'), ('section', 'Document Section')], default='slide', max_length=20)),
                ('rich_content', models.TextField(blank=True, help_text='Rich HTML content for document sections')),
                ('content_blocks', models.JSONField(blank=True, default=list, help_text='Structured content blocks')),
                ('canvas_json', models.TextField(blank=True)),
                ('rendered_image', models.ImageField(blank=True, null=True, upload_to='rendered_slides/')),
                ('diagrams', models.JSONField(blank=True, default=list, help_text='Diagram elements data')),
                ('animations', models.JSONField(blank=True, default=list, help_text='Animation configurations')),
                ('interactive_elements', models.JSONField(blank=True, default=list, help_text='Interactive elements like buttons, links')),
                ('layout_template', models.CharField(blank=True, help_text='Layout template name', max_length=50)),
                ('custom_css', models.TextField(blank=True, help_text='Custom CSS for this slide/section')),
                ('background_settings', models.JSONField(blank=True, default=dict, help_text='Background color, image, gradient')),
                ('image_prompt', models.TextField(blank=True)),
                ('image_url', models.URLField(blank=True)),
                ('comments', models.JSONField(blank=True, default=list, help_text='Comments on this slide/section')),
                ('version_history', models.JSONField(blank=True, default=list, help_text='Version history for tracking changes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('presentation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slides', to='users.oldpresentation')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TemplateImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='templates/')),
                ('type', models.CharField(choices=[('2d', '2D'), ('3d', '3D')], default='2d', max_length=2)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='users.templatecategory')),
            ],
        ),
        migrations.CreateModel(
            name='TemplateRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('admin_response', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('credits', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text="User's available credits (supports fractional values)", max_digits=8)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', max_length=10)),
                ('challenges_won', models.PositiveIntegerField(default=0)),
                ('badges', models.ManyToManyField(blank=True, to='users.badge')),
                ('followers', models.ManyToManyField(blank=True, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('plan_name', models.CharField(blank=True, max_length=50, null=True)),
                ('amount', models.PositiveIntegerField(default=0, help_text='Actual payment in cents after discount')),
                ('base_price', models.PositiveIntegerField(default=0, help_text='Base price in cents before discount')),
                ('credits_added', models.PositiveIntegerField(default=0)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('reward_credited', models.BooleanField(default=False)),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_invitations', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('inviter', 'invitee')},
            },
        ),
        migrations.CreateModel(
            name='PresentationVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version_number', models.PositiveIntegerField()),
                ('content_snapshot', models.JSONField(help_text='Full presentation content at this version')),
                ('changes_summary', models.TextField(blank=True)),
                ('is_auto_save', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('presentation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='users.presentation')),
            ],
            options={
                'ordering': ['-version_number'],
                'unique_together': {('presentation', 'version_number')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achieved_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
